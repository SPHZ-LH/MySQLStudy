28、约束（非常重要，五颗星★★★★★）

    28.1、什么是约束？
        约束对印的英语单词：constraint
        在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中的数据的
        完整性、有效性！！！

        约束的作用就是为了保证：表中的数据有效！！

    28.2、约束包括哪些？
        非空约束：not null
        唯一约束：unique
        主键约束：primary key（简称PK）
        外键约束：foreign key（简称FK）
        检查约束：check（mysql不支持，oracle支持）

        我们这里重点学习四个约束：
            not null
            unique
            primary key
            foreign key

    28.3、非空约束：not null

        非空约束not null约束的字段不能为NULL。
        drop table if exists t_vip;
        create table t_vip(
            id int,
            name varchar(255) not null // not null 只有列级约束，没有表级约束！
        );
        insert into t_vip(id,name) values(1,'zhangsan');
        insert into t_vip(id,name) values(2,'lisi');

        insert into t_vip(id) values(3);
        ERROR 1364 (HY000): Field 'name' doesn't have a default value

        小插曲：
            xxxx.sql这种文件被称为sql脚本文件。
            sql脚本文件中编写了大量的sql语句。
            我们执行sql脚本文件的的时候，该文件中所有的sql语句会全部执行！
            批量的执行SQL语句，可以使用sql脚本文件。
            在mysql当中怎么执行sql脚本呢？
                mysql> source D:\vip.sql

            你在实际的工作中，第一天到了公司，项目经理会给你一个xxx.sql文件，
            你执行这个脚本文件，你电脑上的数据库数据就有了！

    28.4、唯一性约束：unique

        唯一性约束unique约束的字段不能重复，但是可以NULL。
        drop table if exists t_vip;
        create table t_vip(
            id int,
            name varchar(255) unique,
            email varchar(255)
        );

        insert into t_vip(id,name,email) values(1,'zhangsan','zhangsan@123.com');
        insert into t_vip(id,name,email) values(2,'lisi','lisi@123.com');
        insert into t_vip(id,name,email) values(3,'wangwu','wangwu@123.com');
        select * from t_vip;

        insert into t_vip(id,name,email) values(4,'wangwu','wangwu@sina.com');
        ERROR 1062 (23000): Duplicate entry 'wangwu' for key 't_vip.name'

        insert into t_vip(id) values(4);
        insert into t_vip(id) values(5);
        +------+----------+------------------+
        | id   | name     | email            |
        +------+----------+------------------+
        |    1 | zhangsan | zhangsan@123.com |
        |    2 | lisi     | lisi@123.com     |
        |    3 | wangwu   | wangwu@123.com   |
        |    4 | NULL     | NULL             |
        |    5 | NULL     | NULL             |
        +------+----------+------------------+

        新需求：name和email两个字段联合起来具有唯一性！！！！
            drop table if exists t_vip;
            create table t_vip(
                id int,
                name varchar(255) unique, // 约束直接甜腻骄傲到列后面的，叫做列级约束。
                email varchar(255) unique
            );
            这张表这样创建是不符合我以上“新需求”的。
            这样创建表示：name具有唯一性，email具有唯一性。各自唯一。

            以下这样的数据是符合我“新需求”的。
            但如果采用以上方式创建表的化，肯定创建失败，因为'zhangsan'和'zhangsan'重复了。
            insert into t_vip(id,name,email) values(1,'zhangsan','zhangsan@123.com');
            insert into t_vip(id,name,email) values(2,'zhangsan','zhangsan@sina,com');

            怎么创建这样的表，才能符合新需求呢？
                drop table if exists t_vip;
                create table t_vip(
                    id int,
                    name varchar(255),
                    email varchar(255),
                    unique(name,email) // 约束没有添加在列的后面，这样的约束被称为表级约束。
                );
                insert into t_vip(id,name,email) values(1,'zhangsan','zhangsan@123.com');
                insert into t_vip(id,name,email) values(2,'zhangsan','zhangsan@sina.com');
                select * from t_vip;

                name和email两个字段联合起来唯一！！！
                insert into t_vip(id,name,email) value(3,'zhangsan','zhangsan@sina.com');
                ERROR 1062 (23000): Duplicate entry 'zhangsan-zhangsan@sina.com' for key 't_vip.name'

        什么时候使用表级约束呢？
            需要给多个字段联合起来添加某一个约束的时候，需要使用表级约束。

        unique 和not null 可以联合吗？
            drop table if exists t_vip;
            create table t_vip(
                id int,
                name varchar(255) not null unique
            );

            mysql> desc t_vip;
            +-------+--------------+------+-----+---------+-------+
            | Field | Type         | Null | Key | Default | Extra |
            +-------+--------------+------+-----+---------+-------+
            | id    | int          | YES  |     | NULL    |       |
            | name  | varchar(255) | NO   | PRI | NULL    |       |
            +-------+--------------+------+-----+---------+-------+

            在mysql当中，如果一个字段同时被not null和unique约束的话，
            该字段自动变成主键字段。（注意：oracle中不一样！）

            insert into t_vip(id,name) values(1,'zhangsan');

            insert into t_vip(id,name) values(2,'zhangsan'); // 错误了：name不能重复

            insert into t_vip(id) values(2); // 错误了：name不能为NULL

    28.5、主键约束（primary key，简称PK）非常重要五颗星★★★★★

        主键约束的相关术语？
            主键约束：就是一种约束。
            主键字段：该字段上添加了主键约束，这样的字段叫做：主键字段
            主键值：主键字段中的每一个值都叫做：主键值。

        什么是主键？有啥用？
            主键值就是每一行记录的唯一标识。
            主键值就是每一行记录的身份证号！！！

        记住：任何一张表都应该有主键，没有主键，表无效！！

        主键的特征：not bull + unique（主键值不能是NULL，同时也不能重复！）

        怎么给一张表添加主键约束呢？
            drop table if exists t_vip;
            create table t_vip(
                id int primary key, // 列级约束
                name varchar(255)
            );
            insert into t_vip(id,name) values(1,'zhangsan');
            insert into t_vip(id,name) values(2,'lisi');

            //错误：id不能重复
            insert into t_vip(id,name) values(2,'wangwu');
            ERROR 1062 (23000): Duplicate entry '2' for key 't_vip.PRIMARY'

            //错误：id不能为NULL
            insert into t_vip(name) values('zhouliu');
            ERROR 1364 (HY000): Field 'id' doesn't have a default value
        
        可以这样添加主键吗，使用表级约束？
            drop table if exists t_vip;
            create table t_vip(
                id int,
                name varchar(255),
                primary key(id) // 表级约束
            );
            insert into t_vip(id,name) values(1,'zhangsan');

            //错误
            insert into t_vip(id,name) values(1,'lisi');
            ERROR 1062 (23000): Duplicate entry '1' for key 't_vip.PRIMARY'

        表级约束主要是给多个字段联合起来添加约束？
            drop table if exists t_vip;
            // id和name联合起来做主键：复合主题！！！！
            create table t_vip(
                id int,
                name varchar(255),
                email varchar(255),
                primary key(id,name)
            );
            insert into t_vip(id,name,email) values(1,'zhangsan','zhangsan@123.com');
            insert into t_vip(id,name,email) values(1,'lisi','lisi@123.com');

            //错误：不能重复
            insert into t_vip(id,name,email) value(1,'lisi','lisi@123.com');
            ERROR 1062 (23000): Duplicate entry '1-lisi' for key 't_vip.PRIMARY'

            在实际开发中不建议使用：复合主键。建议使用单一主键！
            因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到
            复合主键比较复杂，不建议使用！！！

        一张表中主键约束能加两个吗？
            drop table if exists t_vip;
            create table t_vip(
                id int primary key,
                name varchar(255) primary key
            );
            ERROR 1068 (42000): Multiple primary key defined
            结论：一张表，主键约束只能添加1个。（主键只能有1个）

        主键值建议使用：
            int
            bigint
            char
            等类型。

            不建议使用：varchar来做主键。主键值一般都是数字,一般都是定长的！

        主键除了：单一主键和复合主键之外，还可以这样进行分类？
            自然主键：主键值是一个自然数，和业务没有关系。
            业务主键：主键值和业务紧密关联，例如拿银行卡账号做主键值。这就是业务主键！

            在实际开发中使用业务主键多，还是使用自然主键多一些？
                自然主键使用比较多，因为主键只要做到不重复就行，不需要有意义。
                业务主键不好，因为主键一旦和业务挂钩，那么当业务发生变动的时候，
                可能会影响到主键值，所以业务主键不建议使用。尽量使用自然主键。

        在mysql当中，有一种机制，可以帮助我们自动维护一个主键值？
            drop table if exists t_vip;
            create table t_vip(
                id int primary key auto_increment,
                name varchar(255)
            );
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            insert into t_vip(name) values('zhangsan');
            select * from t_vip;

            +----+----------+
            | id | name     |
            +----+----------+
            |  1 | zhangsan |
            |  2 | zhangsan |
            |  3 | zhangsan |
            |  4 | zhangsan |
            |  5 | zhangsan |
            |  6 | zhangsan |
            |  7 | zhangsan |
            |  8 | zhangsan |
            |  9 | zhangsan |
            | 10 | zhangsan |
            +----+----------+

    28.6、外键约束（foreign key，简称FK）非常重要五颗星★★★★★

        外键约束涉及到相关术语：
            外键约束：一种约束（foreign key）
            外键字段：该字段上添加了外键约束
            外键值：外键字段当中的每一个值

        业务背景：
            请涉及数据库表，来描述"班级和学生"的信息？

            第一种方案：班级和学生存储在一张表中？？？
            no(pk)          name        classno         classname
            -----------------------------------------------------
            1               jack        100             北京市大兴区赤庄镇第二中学高三1班
            2               lucy        100             北京市大兴区赤庄镇第二中学高三1班
            3               lilei       100             北京市大兴区赤庄镇第二中学高三1班
            4               hanmeimei   100             北京市大兴区赤庄镇第二中学高三1班
            5               zhangsan    101             北京市大兴区赤庄镇第二中学高三2班
            6               lisi        101             北京市大兴区赤庄镇第二中学高三2班
            7               wangwu      101             北京市大兴区赤庄镇第二中学高三2班
            8               zhaoliu     101             北京市大兴区赤庄镇第二中学高三2班
            分析以上方案的缺点：
                数据冗余，比较浪费！！！！
                这个设计是比较失败的！

            第二种方案：班级一张表、学生一张表？？

            t_calss 班级表
            classno(pk)     classname
            ----------------------------------------------
            100             北京市大兴区赤庄镇第二中学高三1班
            101             北京市大兴区赤庄镇第二中学高三2班

            t_student 学生表
            no(pk)          name        cno(FK--引用t_class这张表的classno)
            --------------------------------------------------------------
            1               jack        100
            2               lucy        100
            3               lilei       100
            4               hanmeimei   100
            5               zhangsan    101
            6               lisi        101
            7               wangwu      101
            8               zhaoliu     101

            当cno字段没有任何约束的时候，可能会导致数据无效。可能出现一个102，但是102不存在。
            所以为了保证cno字段中的值都是100和101，需要给cno字段添加外键约束。
            那么：cno字段就是外键字段。cno字段中的每一个值都是外键值。

            注意：
                t_class是父表
                t_student是子表

                删除表的顺序？
                    先删子，再删父。

                创建数据的顺序？
                    先创建父，在创建子。
                
                插入数据的顺序？
                    先插入父，在插入子。

            drop table if exists t_student;
            drop table if exists t_class;

            create table t_class(
                classno int primary key,
                classname varchar(255)
            );
            create table t_student(
                no int primary key auto_increment,
                name varchar(255),
                cno int,
                foreign key(cno) references t_class(classno)
            );

            insert into t_class(classno,classname) values(100,'北京市大兴区赤庄镇第二中学高三1班');
            insert into t_class(classno,classname) values(101,'北京市大兴区赤庄镇第二中学高三2班');

            insert into t_student(name,cno) values('jack',100);
            insert into t_student(name,cno) values('lucy',100);
            insert into t_student(name,cno) values('lilei',100);
            insert into t_student(name,cno) values('hanmeimei',100);
            insert into t_student(name,cno) values('zhangsan',101);
            insert into t_student(name,cno) values('lisi',101);
            insert into t_student(name,cno) values('wangwu',101);
            insert into t_student(name,cno) values('zhaoliu',101);

            select * from t_class;
            select * from t_student;

        思考：子表中的外键引用的父表中的某个字段，被引用的这个字段必须是主键吗？
            不一定是主键，但至少具有unique约束

        思考：外键可以为NULL吗？
            外简直可以为NULL